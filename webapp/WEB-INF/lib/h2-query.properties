# DB query properties
listaurant.cuisine.select=SELECT cuisine_id, cuisine_name FROM cuisine ORDER BY cuisine_name
listaurant.restaurant.select=SELECT r.restaurant_id, r.restaurant_name, r.street_address, r.city, r.state, r.zip, \
								r.phone_number, r.website, r.restaurant_image, r.cuisine_id, c.cuisine_name, \
								(SELECT avg(rv.rating) from review rv WHERE rv.restaurant_id = r.restaurant_id) avg_rating, \
								(SELECT count(rv.rating) from review rv WHERE rv.restaurant_id = r.restaurant_id) review_count \
								FROM restaurant r LEFT JOIN cuisine c ON r.cuisine_id = c.cuisine_id \
								WHERE r.restaurant_name LIKE :restName \
								AND c.cuisine_id LIKE :cuisineId \
								AND (r.street_address LIKE :loc OR r.city LIKE :loc OR r.state LIKE :state OR r.zip LIKE :zip)
listaurant.member.select=SELECT user_id, first_name, middle_name, last_name FROM member \
							WHERE user_id=:userName AND user_password=:pwd
listaurant.member.billing.select=SELECT user_id, first_name, middle_name, last_name, street_address, \
									city, state, zip, phone_number, \
									email, cc_number, card_type, cc_expiry_yy, cc_expiry_mm, cc_holder_name \
									FROM member WHERE user_id = :userName
listaurant.restaurant.header.select=SELECT r.restaurant_id, r.restaurant_name, r.restaurant_image, r.street_address, \
										r.city, r.state, r.zip, r.phone_number, r.website, c.cuisine_name, \
										(SELECT avg(rv.rating) FROM review rv WHERE rv.restaurant_id = r.restaurant_id) avg_rating, \
										(SELECT count(rv.rating) from review rv WHERE rv.restaurant_id = r.restaurant_id) review_count \
										FROM restaurant r LEFT JOIN cuisine c ON r.cuisine_id = c.cuisine_id \
										WHERE r.restaurant_id = :restId
listaurant.tabletype.select=SELECT type_id, type_name from table_type
listaurant.tabletype.available.select=SELECT ((SELECT table_count FROM r_table WHERE restaurant_id = :restId \
										AND type_id = :typeId)- \
										(SELECT count(reservation_number) FROM reservation WHERE restaurant_id = :restId \
										AND type_id = :typeId AND reserve_datetime BETWEEN \
										(DATEADD('HOUR',-2,PARSEDATETIME(:reserveDT,'MM/dd/yyyy hh:mm aaa'))) AND \
										(DATEADD('HOUR',2,PARSEDATETIME(:reserveDT,'MM/dd/yyyy hh:mm aaa'))))) \
										AS avail_tables
listaurant.reservation.insert=INSERT INTO reservation(restaurant_id,type_id,user_id,reserve_datetime) \
								VALUES(:restaurantId, :tableType, :userId, PARSEDATETIME(concat(:reserveDate,:reserveTime),'MM/dd/yyyyhh:mm aaa'))
listaurant.reservation.select=SELECT rvt.reservation_number, rvt.restaurant_id, rvt.type_id, r.restaurant_name, \
								FORMATDATETIME(rvt.reserve_datetime,'MM/dd/yyyy') AS reserve_date, \
								FORMATDATETIME(rvt.reserve_datetime,'hh:mm aaa') AS reserve_time, \
								CASEWHEN(rvt.reserve_datetime<now(),1,0) AS expired \
								FROM reservation rvt, restaurant r \
								WHERE rvt.restaurant_id = r.restaurant_id AND rvt.user_id = :userName
listaurant.reservation.existing.select=SELECT rvt.reservation_number, rvt.restaurant_id, rvt.type_id, r.restaurant_name, \
										FORMATDATETIME(rvt.reserve_datetime,'MM/dd/yyyy') AS reserve_date, \
										FORMATDATETIME(rvt.reserve_datetime,'hh:mm aaa') AS reserve_time, \
										0 AS expired \
										FROM reservation rvt, restaurant r \
										WHERE rvt.reservation_number = :reservationNumber \
										AND rvt.restaurant_id = r.restaurant_id
listaurant.reservation.update=UPDATE reservation SET reserve_datetime = PARSEDATETIME(concat(:reserveDate,:reserveTime),'MM/dd/yyyyhh:mm aaa'), \
								type_id=:tableType WHERE reservation_number = :reservationNumber
listaurant.reservation.delete=DELETE FROM reservation WHERE reservation_number = :reservationNumber													
listaurant.member.exists.select=SELECT 1 FROM member WHERE user_id= :userName
listaurant.member.insert=INSERT INTO member(first_name,middle_name,last_name,street_address, \
							city,state,zip,email,phone_number,user_id,user_password) \
							VALUES(:firstName,:middleName,:lastName,:streetAddress, \
							:city,:state,:zip,:email,:phone,:userId,:userPwd)
listaurant.member.billing.update=UPDATE member SET card_type=:cardType, cc_number=:ccNumber \
									,cc_expiry_mm=:ccExpiryMonth, cc_expiry_yy=:ccExpiryYear, cc_holder_name=:ccHolderName \
									WHERE user_id=:userId
listaurant.review.restaurant.select=SELECT * FROM ( \
						SELECT r.restaurant_id, r.restaurant_name, r.street_address, r.city, r.state, r.zip, \
						r.phone_number, r.website, r.restaurant_image, r.cuisine_id, c.cuisine_name, \
						(SELECT avg(rv.rating) from review rv WHERE rv.restaurant_id = r.restaurant_id) avg_rating, \
						(SELECT count(rv.rating) from review rv WHERE rv.restaurant_id = r.restaurant_id) review_count \
						FROM restaurant r LEFT JOIN cuisine c ON r.cuisine_id = c.cuisine_id \
						WHERE r.restaurant_name LIKE :restName \
						AND c.cuisine_id LIKE :cuisineId \
						AND (r.street_address LIKE :loc OR r.city LIKE :loc OR r.state LIKE :state OR r.zip LIKE :zip) \
						) temp
listaurant.review.select=SELECT review_number, restaurant_id, user_id, rating, comments, \
							FORMATDATETIME(review_datetime,'MM/dd/yyyy hh:mm aaa') AS review_datetime \
							FROM review r WHERE restaurant_id = :restId ORDER BY r.review_datetime DESC
listaurant.review.insert=INSERT INTO review(restaurant_id,user_id,rating,comments,review_datetime) \
							VALUES(:restaurantId,:userId,:rating,:comments,now(0))
listaurant.menu.select=SELECT item_code, item_name, description, price, item_category \
						FROM menu WHERE restaurant_id = :restId" + " ORDER BY item_category
listaurant.togoorder.insert=INSERT INTO togo_order(total_price,pickup_datetime,user_id) \
							VALUES(:totalPrice, PARSEDATETIME(:pickupDateTime,'MM/dd/yyyy hh:mm aaa'), :userId)
listaurant.togoorder.item.insert=INSERT INTO order_item(order_number,restaurant_id,item_code,quantity) \
									VALUES(:orderNumber, :restaurantId, :itemCode, :quantity)
								